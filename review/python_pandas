import numpy as np
import pandas as pd
def print_hi(name):
    # 在下面的代码行中使用断点来调试脚本。
    print(f'Hi, {name}')  # 按 Ctrl+F8 切换断点。


# 按间距中的绿色按钮以运行脚本。
if __name__ == '__main__':
    print_hi('PyCharm')
    a = pd.Series([1,3,6,np.nan,44,1])
    print(a)

    dates = pd.date_range('20230101',periods=6)
    print(dates)

    # df = pd.DataFrame(np.random.randn(6,4),index=dates,columns=list('abcd'))
    df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=['a','b','c','d'])
    print(df)

    df1 = pd.DataFrame(np.arange(12).reshape(3,4))
    print(df1)

    print(df1.dtypes)
    print(df1.index)
    print(df1.columns)

    print(df1.values)
    print(df1.describe())
    print(df1.T)
    # axis = 1表示对列进行排序，ascending=False表示倒序排序
    print(df1.sort_index(axis=1,ascending=False))
    # axis = 0表示对列进行排序，ascending=False表示倒序排序
    print(df1.sort_index(axis=0, ascending=False))

    print(df1.sort_values(by=2))


运行结果：
Hi, PyCharm
0     1.0
1     3.0
2     6.0
3     NaN
4    44.0
5     1.0
dtype: float64
DatetimeIndex(['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04',
               '2023-01-05', '2023-01-06'],
              dtype='datetime64[ns]', freq='D')
                   a         b         c         d
2023-01-01  1.786093 -0.749410  1.099164  0.977671
2023-01-02  1.353431 -0.164055 -0.318128 -1.900994
2023-01-03  2.072385  1.684659 -1.571492 -0.476505
2023-01-04 -0.389172 -1.370113 -0.631798 -0.181715
2023-01-05  1.174679  0.573562 -1.615278 -1.740758
2023-01-06 -0.143425  0.455286  0.554629 -0.454328
   0  1   2   3
0  0  1   2   3
1  4  5   6   7
2  8  9  10  11
0    int32
1    int32
2    int32
3    int32
dtype: object
RangeIndex(start=0, stop=3, step=1)
RangeIndex(start=0, stop=4, step=1)
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
         0    1     2     3
count  3.0  3.0   3.0   3.0
mean   4.0  5.0   6.0   7.0
std    4.0  4.0   4.0   4.0
min    0.0  1.0   2.0   3.0
25%    2.0  3.0   4.0   5.0
50%    4.0  5.0   6.0   7.0
75%    6.0  7.0   8.0   9.0
max    8.0  9.0  10.0  11.0
   0  1   2
0  0  4   8
1  1  5   9
2  2  6  10
3  3  7  11
    3   2  1  0
0   3   2  1  0
1   7   6  5  4
2  11  10  9  8
   0  1   2   3
2  8  9  10  11
1  4  5   6   7
0  0  1   2   3
   0  1   2   3
0  0  1   2   3
1  4  5   6   7
2  8  9  10  11




if __name__ == '__main__':
    print_hi('PyCharm')
    dates = pd.date_range('20230101',periods=6)
    df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates,columns=list('abcd'))
    print(df)

    print(df['a'],df.a)

    print(df[0:3],df['20230102':'20230104'])

    print(df.loc['20230103'])

    print(df.loc[:,['a','b']])

    print(df.loc['20230103', ['a', 'b']])

    print(df.iloc[3])
    print(df.iloc[3,1])
    print(df.iloc[3:5,1:3])
    print(df.iloc[[1,3,5],1:3])

    # print(df.ix[:3,['a','c']])已经弃用
    print(df.loc[['20230103','20230102'],['a','c']])

    print(df[df.a > 8])


运行结果：
Hi, PyCharm
             a   b   c   d
2023-01-01   0   1   2   3
2023-01-02   4   5   6   7
2023-01-03   8   9  10  11
2023-01-04  12  13  14  15
2023-01-05  16  17  18  19
2023-01-06  20  21  22  23
2023-01-01     0
2023-01-02     4
2023-01-03     8
2023-01-04    12
2023-01-05    16
2023-01-06    20
Freq: D, Name: a, dtype: int32 2023-01-01     0
2023-01-02     4
2023-01-03     8
2023-01-04    12
2023-01-05    16
2023-01-06    20
Freq: D, Name: a, dtype: int32
            a  b   c   d
2023-01-01  0  1   2   3
2023-01-02  4  5   6   7
2023-01-03  8  9  10  11              a   b   c   d
2023-01-02   4   5   6   7
2023-01-03   8   9  10  11
2023-01-04  12  13  14  15
a     8
b     9
c    10
d    11
Name: 2023-01-03 00:00:00, dtype: int32
             a   b
2023-01-01   0   1
2023-01-02   4   5
2023-01-03   8   9
2023-01-04  12  13
2023-01-05  16  17
2023-01-06  20  21
a    8
b    9
Name: 2023-01-03 00:00:00, dtype: int32
a    12
b    13
c    14
d    15
Name: 2023-01-04 00:00:00, dtype: int32
13
             b   c
2023-01-04  13  14
2023-01-05  17  18
             b   c
2023-01-02   5   6
2023-01-04  13  14
2023-01-06  21  22
            a   c
2023-01-03  8  10
2023-01-02  4   6
             a   b   c   d
2023-01-04  12  13  14  15
2023-01-05  16  17  18  19
2023-01-06  20  21  22  23





if __name__ == '__main__':
    print_hi('PyCharm')
    dates = pd.date_range('20230101',periods=6)
    df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates,columns=list('abcd'))
    print(df)

    # 筛选数据 或者修改值
    df.iloc[2,2] = 111
    df.loc['20230102','b'] = 23
    df[df.a > 4] = 333
    df.a[df.a > 4] = 0
    df['c'] = np.nan
    df['e'] = pd.Series([1,2,3,4,5,6],index=pd.date_range('20230101',periods=6))
    print(df)



运行结果：
Hi, PyCharm
             a   b   c   d
2023-01-01   0   1   2   3
2023-01-02   4   5   6   7
2023-01-03   8   9  10  11
2023-01-04  12  13  14  15
2023-01-05  16  17  18  19
2023-01-06  20  21  22  23
            a    b   c    d  e
2023-01-01  0    1 NaN    3  1
2023-01-02  4   23 NaN    7  2
2023-01-03  0  333 NaN  333  3
2023-01-04  0  333 NaN  333  4
2023-01-05  0  333 NaN  333  5
2023-01-06  0  333 NaN  333  6



if __name__ == '__main__':
    print_hi('PyCharm')
    dates = pd.date_range('20230101',periods=6)
    df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates,columns=list('abcd'))
    print(df)
    df.iloc[0,1] = np.nan
    df.iloc[1,2] = np.nan
    print(df)
    # how = 'any'表示任何一个元素为nan
    print(df.dropna(axis=0,how='any'))

    print(df.dropna(axis=1, how='any'))
    # how = 'all'表示所有都为nan
    print(df.dropna(axis=1, how='all'))

    # 填充0
    print(df.fillna(value=0))

    print(df.isnull())

    print(np.any(df.isnull()) == True)



运行结果：
Hi, PyCharm
             a   b   c   d
2023-01-01   0   1   2   3
2023-01-02   4   5   6   7
2023-01-03   8   9  10  11
2023-01-04  12  13  14  15
2023-01-05  16  17  18  19
2023-01-06  20  21  22  23
             a     b     c   d
2023-01-01   0   NaN   2.0   3
2023-01-02   4   5.0   NaN   7
2023-01-03   8   9.0  10.0  11
2023-01-04  12  13.0  14.0  15
2023-01-05  16  17.0  18.0  19
2023-01-06  20  21.0  22.0  23
             a     b     c   d
2023-01-03   8   9.0  10.0  11
2023-01-04  12  13.0  14.0  15
2023-01-05  16  17.0  18.0  19
2023-01-06  20  21.0  22.0  23
             a   d
2023-01-01   0   3
2023-01-02   4   7
2023-01-03   8  11
2023-01-04  12  15
2023-01-05  16  19
2023-01-06  20  23
             a     b     c   d
2023-01-01   0   NaN   2.0   3
2023-01-02   4   5.0   NaN   7
2023-01-03   8   9.0  10.0  11
2023-01-04  12  13.0  14.0  15
2023-01-05  16  17.0  18.0  19
2023-01-06  20  21.0  22.0  23
             a     b     c   d
2023-01-01   0   0.0   2.0   3
2023-01-02   4   5.0   0.0   7
2023-01-03   8   9.0  10.0  11
2023-01-04  12  13.0  14.0  15
2023-01-05  16  17.0  18.0  19
2023-01-06  20  21.0  22.0  23
                a      b      c      d
2023-01-01  False   True  False  False
2023-01-02  False  False   True  False
2023-01-03  False  False  False  False
2023-01-04  False  False  False  False
2023-01-05  False  False  False  False
2023-01-06  False  False  False  False
True





if __name__ == '__main__':
    print_hi('PyCharm')
    data = pd.read_csv('./data/2_student_info.csv')
    print(data)

    data.to_csv('./data/student.csv')
    print("保存成功")

运行结果：
Hi, PyCharm
      bf_StudentID bf_Name bf_sex  ... bf_zhusu  bf_leaveSchool bf_qinshihao
0            14454     陈某某      女  ...      NaN             NaN          NaN
1            14479     曹某某      男  ...      1.0             NaN        315.0
2            14486     金某某      男  ...      1.0             NaN        321.0
3            14549     张某某      女  ...      NaN             NaN          NaN
4            14550     张某某      女  ...      NaN             NaN          NaN
...            ...     ...    ...  ...      ...             ...          ...
1760         16156     戴某某      男  ...      NaN             NaN          NaN
1761         16157     龚某某      男  ...      1.0             NaN        401.0
1762         16158     李某某      女  ...      NaN             NaN          NaN
1763         16151     邓某某      女  ...      1.0             NaN        504.0
1764         16152     何某某      女  ...      NaN             NaN          NaN

[1765 rows x 14 columns]
保存成功








if __name__ == '__main__':
    print_hi('PyCharm')
    df1 = pd.DataFrame(np.ones((3,4))*0,columns=list('abcd'))
    print(df1)
    df2 = pd.DataFrame(np.ones((3,4))*1,columns=list('abcd'))
    print(df2)
    df3 = pd.DataFrame(np.ones((3, 4)) * 2, columns=list('abcd'))
    print(df3)

    # 上下合并
    res = pd.concat([df1,df2,df3],axis=0,ignore_index=True)
    print(res)

    # 左右合并
    res1 = pd.concat([df1,df2,df3],axis=1,ignore_index=True)
    print(res1)



    df4 = pd.DataFrame(np.ones((3, 4)) * 0, columns=list('abcd'))
    print(df4)
    df5 = pd.DataFrame(np.ones((3, 4)) * 1, columns=list('bcde'))
    print(df5)

    res2 = pd.concat([df4,df5],join='outer')
    print(res2)

    res3 = pd.concat([df4, df5], join='inner',ignore_index=True)
    print(res3)

    df6 = pd.DataFrame(np.ones((3, 4)) * 0, columns=list('abcd'))
    print(df6)
    df7 = pd.DataFrame(np.ones((3, 4)) * 1, columns=list('bcde'))
    print(df7)

    # join_axes已被弃用
    # res4 = pd.concat([df6,df7],axis=1,join_axes=[df6.index])
    res4 = pd.concat([df6,df7],axis=1)
    # res4 = res4.reindex(df6.index)
    print(res4)

    df8 = pd.DataFrame(np.ones((3, 4)) * 0, columns=list('abcd'))
    print(df8)
    df9 = pd.DataFrame(np.ones((3, 4)) * 1, columns=list('abcd'))
    df9 = pd.DataFrame(np.ones((3, 4)) * 1, columns=list('bcde'),index=[2,3,4])
    print(df9)

    res5 = df8.append(df9,ignore_index=True)
    print("ssssssssssssssssssssssssssssssssssssssssssssssssssssss")
    print(res5)
    res5 = df8.append([df9,df2],ignore_index=True)
    print(res5)

    s1 = pd.Series([1,2,3,4],index=list('abcd'))
    res6 = df8.append(s1,ignore_index=True)
    print(res6)


运行结果：
Hi, PyCharm
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
     a    b    c    d
0  1.0  1.0  1.0  1.0
1  1.0  1.0  1.0  1.0
2  1.0  1.0  1.0  1.0
     a    b    c    d
0  2.0  2.0  2.0  2.0
1  2.0  2.0  2.0  2.0
2  2.0  2.0  2.0  2.0
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
3  1.0  1.0  1.0  1.0
4  1.0  1.0  1.0  1.0
5  1.0  1.0  1.0  1.0
6  2.0  2.0  2.0  2.0
7  2.0  2.0  2.0  2.0
8  2.0  2.0  2.0  2.0
    0    1    2    3    4    5    6    7    8    9    10   11
0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  2.0  2.0  2.0  2.0
1  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  2.0  2.0  2.0  2.0
2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  2.0  2.0  2.0  2.0
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
     b    c    d    e
0  1.0  1.0  1.0  1.0
1  1.0  1.0  1.0  1.0
2  1.0  1.0  1.0  1.0
     a    b    c    d    e
0  0.0  0.0  0.0  0.0  NaN
1  0.0  0.0  0.0  0.0  NaN
2  0.0  0.0  0.0  0.0  NaN
0  NaN  1.0  1.0  1.0  1.0
1  NaN  1.0  1.0  1.0  1.0
2  NaN  1.0  1.0  1.0  1.0
     b    c    d
0  0.0  0.0  0.0
1  0.0  0.0  0.0
2  0.0  0.0  0.0
3  1.0  1.0  1.0
4  1.0  1.0  1.0
5  1.0  1.0  1.0
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
     b    c    d    e
0  1.0  1.0  1.0  1.0
1  1.0  1.0  1.0  1.0
2  1.0  1.0  1.0  1.0
     a    b    c    d    b    c    d    e
0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
1  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
     b    c    d    e
2  1.0  1.0  1.0  1.0
3  1.0  1.0  1.0  1.0
4  1.0  1.0  1.0  1.0
ssssssssssssssssssssssssssssssssssssssssssssssssssssss
     a    b    c    d    e
0  0.0  0.0  0.0  0.0  NaN
1  0.0  0.0  0.0  0.0  NaN
2  0.0  0.0  0.0  0.0  NaN
3  NaN  1.0  1.0  1.0  1.0
4  NaN  1.0  1.0  1.0  1.0
5  NaN  1.0  1.0  1.0  1.0
     a    b    c    d    e
0  0.0  0.0  0.0  0.0  NaN
1  0.0  0.0  0.0  0.0  NaN
2  0.0  0.0  0.0  0.0  NaN
3  NaN  1.0  1.0  1.0  1.0
4  NaN  1.0  1.0  1.0  1.0
5  NaN  1.0  1.0  1.0  1.0
6  1.0  1.0  1.0  1.0  NaN
7  1.0  1.0  1.0  1.0  NaN
8  1.0  1.0  1.0  1.0  NaN
     a    b    c    d
0  0.0  0.0  0.0  0.0
1  0.0  0.0  0.0  0.0
2  0.0  0.0  0.0  0.0
3  1.0  2.0  3.0  4.0





if __name__ == '__main__':
    print_hi('PyCharm')
    left = pd.DataFrame({'key':['k1','k2','k3','k4'],
                         'a':['a1','a2','a3','a4'],
                         'b':['b1','b2','b3','b4']})
    right = pd.DataFrame(
        {'key': ['k1', 'k2', 'k3', 'k4'],
         'c': ['c1', 'c2', 'c3', 'c4'],
         'd': ['d1', 'd2', 'd3', 'd4']}
    )
    print(left)
    print(right)

    res = pd.merge(left,right,on='key')
    print(res)

    left = pd.DataFrame({'key1': ['k1', 'k1', 'k2', 'k3'],
                         'key2': ['k1', 'k2', 'k1', 'k2'],
                         'a': ['a1', 'a2', 'a3', 'a4'],
                         'b': ['b1', 'b2', 'b3', 'b4']})
    right = pd.DataFrame(
        {'key1': ['k1', 'k2', 'k2', 'k3'],
         'key2': ['k1', 'k1', 'k1', 'k1'],
         'c': ['c1', 'c2', 'c3', 'c4'],
         'd': ['d1', 'd2', 'd3', 'd4']}
    )
    print(left)
    print(right)

    res = pd.merge(left, right, on=['key1','key2'])
    print(res)

    res = pd.merge(left, right, how='inner')
    print(res)

    res = pd.merge(left, right, how='outer')
    print(res)

    res = pd.merge(left, right, how='right')
    print(res)

    res = pd.merge(left, right, how='left')
    print(res)

    df1 = pd.DataFrame({'col1':[0,1],
                        'col_left':['a','b']})
    df2 = pd.DataFrame({'col1': [1,2,2],
                        'col_right': [2,2,2]})
    print(df1)
    print(df2)

    # indicator = True如何合并的
    res = pd.merge(df1,df2,on='col1',how='outer',indicator=True)
    print(res)

    res = pd.merge(df1,df2,on='col1',how='outer',indicator='indicator_cloumn')
    print(res)

    left = pd.DataFrame({
                         'a': ['a1', 'a2', 'a3', 'a4'],
                         'b': ['b1', 'b2', 'b3', 'b4']},
    index =  ['k1', 'k2', 'k3', 'k4'])
    right = pd.DataFrame(
        {
         'c': ['c1', 'c2', 'c3', 'c4'],
         'd': ['d1', 'd2', 'd3', 'd4']},
        index=['k1', 'k2', 'k3', 'k4'],
    )
    print(left)
    print(right)

    res = pd.merge(left,right,left_index=True,right_index=True,how='outer')
    print(res)

    res = pd.merge(left,right,left_index=True,right_index=True,how='inner')
    print(res)


    boys = pd.DataFrame({'k':['k1','k2','k3'],
                         'age':[1,2,3]})
    girls = pd.DataFrame({'k':['k0','k2','k3'],
                          'age':[4,5,6]})
    print(boys)
    print(girls)
    res = pd.merge(boys,girls,on='k',suffixes=['_boys','_girls'],how='inner')
    print(res)

    res = pd.merge(boys, girls, on='k', suffixes=['_boys', '_girls'], how='outer')
    print(res)

运行结果：
Hi, PyCharm
  key   a   b
0  k1  a1  b1
1  k2  a2  b2
2  k3  a3  b3
3  k4  a4  b4
  key   c   d
0  k1  c1  d1
1  k2  c2  d2
2  k3  c3  d3
3  k4  c4  d4
  key   a   b   c   d
0  k1  a1  b1  c1  d1
1  k2  a2  b2  c2  d2
2  k3  a3  b3  c3  d3
3  k4  a4  b4  c4  d4
  key1 key2   a   b
0   k1   k1  a1  b1
1   k1   k2  a2  b2
2   k2   k1  a3  b3
3   k3   k2  a4  b4
  key1 key2   c   d
0   k1   k1  c1  d1
1   k2   k1  c2  d2
2   k2   k1  c3  d3
3   k3   k1  c4  d4
  key1 key2   a   b   c   d
0   k1   k1  a1  b1  c1  d1
1   k2   k1  a3  b3  c2  d2
2   k2   k1  a3  b3  c3  d3
  key1 key2   a   b   c   d
0   k1   k1  a1  b1  c1  d1
1   k2   k1  a3  b3  c2  d2
2   k2   k1  a3  b3  c3  d3
  key1 key2    a    b    c    d
0   k1   k1   a1   b1   c1   d1
1   k1   k2   a2   b2  NaN  NaN
2   k2   k1   a3   b3   c2   d2
3   k2   k1   a3   b3   c3   d3
4   k3   k2   a4   b4  NaN  NaN
5   k3   k1  NaN  NaN   c4   d4
  key1 key2    a    b   c   d
0   k1   k1   a1   b1  c1  d1
1   k2   k1   a3   b3  c2  d2
2   k2   k1   a3   b3  c3  d3
3   k3   k1  NaN  NaN  c4  d4
  key1 key2   a   b    c    d
0   k1   k1  a1  b1   c1   d1
1   k1   k2  a2  b2  NaN  NaN
2   k2   k1  a3  b3   c2   d2
3   k2   k1  a3  b3   c3   d3
4   k3   k2  a4  b4  NaN  NaN
   col1 col_left
0     0        a
1     1        b
   col1  col_right
0     1          2
1     2          2
2     2          2
   col1 col_left  col_right      _merge
0     0        a        NaN   left_only
1     1        b        2.0        both
2     2      NaN        2.0  right_only
3     2      NaN        2.0  right_only
   col1 col_left  col_right indicator_cloumn
0     0        a        NaN        left_only
1     1        b        2.0             both
2     2      NaN        2.0       right_only
3     2      NaN        2.0       right_only
     a   b
k1  a1  b1
k2  a2  b2
k3  a3  b3
k4  a4  b4
     c   d
k1  c1  d1
k2  c2  d2
k3  c3  d3
k4  c4  d4
     a   b   c   d
k1  a1  b1  c1  d1
k2  a2  b2  c2  d2
k3  a3  b3  c3  d3
k4  a4  b4  c4  d4
     a   b   c   d
k1  a1  b1  c1  d1
k2  a2  b2  c2  d2
k3  a3  b3  c3  d3
k4  a4  b4  c4  d4
    k  age
0  k1    1
1  k2    2
2  k3    3
    k  age
0  k0    4
1  k2    5
2  k3    6
    k  age_boys  age_girls
0  k2         2          5
1  k3         3          6
    k  age_boys  age_girls
0  k1       1.0        NaN
1  k2       2.0        5.0
2  k3       3.0        6.0
3  k0       NaN        4.0






# 导入所需要的包
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
def print_hi(name):
    # 在下面的代码行中使用断点来调试脚本。
    print(f'Hi, {name}')  # 按 Ctrl+F8 切换断点。


# 按间距中的绿色按钮以运行脚本。
if __name__ == '__main__':
    print_hi('PyCharm')
    data = pd.Series(np.random.randn(1000),index=np.arange(1000))
    data = data.cumsum()
    data.plot()
    # plt.show()

    data = pd.DataFrame(np.random.randn(1000,4),index=np.arange(1000),columns=list('abcd'))
    data = data.cumsum()
    print(data.head())
    ax = data.plot.scatter(x='a',y='b',label='class 1',color = 'red')
    data.plot.scatter(x='a', y='c', label='class 2',ax = ax,color='blue')
    # data.plot()
    plt.show()

运行结果：
Hi, PyCharm
          a         b         c         d
0 -0.956589  0.950436  1.801507  0.202723
1 -0.954068  1.330826  1.141260  0.037690
2 -2.241505  1.395630 -0.525314 -0.251117
3 -2.881201  2.587553 -0.362224 -0.236750
4 -4.447680  2.147076 -1.885499 -0.844554